{"version":3,"sources":["App.js","index.js"],"names":["foodWasteData","require","ChartJS","register","LinearScale","PointElement","LineElement","Tooltip","Legend","App","props","getRandomRgb","num","Math","round","random","getCountriesAndColors","countries","state","data","map","item","includes","country","push","sort","colors","forEach","setState","this","className","AppNav","style","margin","textAlign","Introduction","References","React","Component","Navbar","sticky","bg","variant","paddingLeft","Brand","href","Nav","Link","id","fontWeight","WorldDataVis","generateData","earliest","latest","formatted","year","loss","loss_percentage","commodity","hasOwnProperty","x","y","label","backgroundColor","datasets","Object","values","i1","i2","localeCompare","plotData","earliestYear","defaultBeginYear","beginYear","endYear","selectedCountry","prevProps","prevState","snapshot","YearRangeSlider","defaultValue","value","setValue","options","scales","beginAtZero","title","text","display","color","plugins","legend","maxHeight","tooltip","callbacks","context","index","dataIndex","dataset","useState","displayValue","setDisplayValue","Form","Label","Range","min","max","onChange","e","target","onMouseUp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc41e31a.chunk.js","sourcesContent":["import './App.css';\r\nimport React, {useState} from 'react';\r\nimport {Form, Nav, Navbar} from 'react-bootstrap';\r\nimport {Chart as ChartJS, Legend, LinearScale, LineElement, PointElement, Tooltip,} from 'chart.js';\r\nimport {Scatter} from 'react-chartjs-2';\r\n\r\nlet foodWasteData = require(\"./food_waste.json\");\r\nChartJS.register(LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: foodWasteData,\r\n            countries: [],\r\n            colors: {}\r\n        }\r\n    }\r\n\r\n    getRandomRgb = () => {\r\n        const num = Math.round(0xffffff * Math.random());\r\n        const r = num >> 16;\r\n        const g = (num >> 8) & 255;\r\n        const b = num & 255;\r\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')';\r\n    }\r\n\r\n    getCountriesAndColors = () => {\r\n        let countries = this.state.countries;\r\n        this.state.data.map(item => countries.includes(item.country) ? null : countries.push(item.country));\r\n        countries.sort()\r\n\r\n        let colors = {}\r\n        countries.forEach(country => colors[country] = this.getRandomRgb());\r\n        this.setState({countries: countries, colors: colors})\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCountriesAndColors();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <AppNav/>\r\n                <div style={{margin: 20}}>\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Introduction/>\r\n                        <WorldDataVis data={this.state.data} countries={this.state.countries} colors={this.state.colors}/>\r\n                    </div>\r\n                    <References/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction AppNav() {\r\n    return <Navbar sticky=\"top\" bg=\"light\" variant=\"light\" style={{paddingLeft: 20}}>\r\n        <Navbar.Brand href=\"/\">Food Waste in the World</Navbar.Brand>\r\n        <Nav className=\"me-auto\">\r\n            <Nav.Link href=\"#introduction\">Introduction</Nav.Link>\r\n            <Nav.Link href=\"#analysis1\">Analysis 1</Nav.Link>\r\n            <Nav.Link href=\"#analysis2\">Analysis 2</Nav.Link>\r\n            <Nav.Link href=\"#analysis3\">Analysis 3</Nav.Link>\r\n        </Nav>\r\n    </Navbar>\r\n}\r\n\r\nfunction Introduction() {\r\n    return <div id=\"introduction\">\r\n        <h1>Food Waste in the World</h1>\r\n        <h5 style={{fontWeight: \"normal\"}}>Team members: Emma Guo, Kaitlynn Pineda, Vinicius Lepca</h5>\r\n        <p>Introduction text</p>\r\n    </div>\r\n}\r\n\r\nclass WorldDataVis extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const earliestYear = 2000;\r\n        const defaultBeginYear = 2000;\r\n        const endYear = 2021;\r\n        this.state = {\r\n            earliestYear: earliestYear,\r\n            defaultBeginYear: defaultBeginYear,\r\n            beginYear: defaultBeginYear,\r\n            endYear: endYear,\r\n            plotData: {datasets: []},\r\n            selectedCountry: null\r\n        }\r\n    }\r\n\r\n    generateData = (earliest, latest, countries) => {\r\n        // Format the data\r\n        let formatted = {};\r\n        this.props.data.forEach(item => {\r\n            const country = item.country;\r\n            const year = item.year;\r\n            const loss = item.loss_percentage;\r\n            const commodity = item.commodity;\r\n\r\n            // Filter by countries\r\n            if (countries == null || countries.includes(country)) {\r\n                // Filter by years\r\n                if (year >= earliest && year <= latest) {\r\n                    if (formatted.hasOwnProperty(country)) {\r\n                        formatted[country].data.push({x: year, y: loss, country: country, commodity: commodity})\r\n                    } else {\r\n                        formatted[country] = {\r\n                            label: country,\r\n                            data: [{x: year, y: loss, country: country, commodity: commodity}],\r\n                            backgroundColor: this.props.colors[country]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        const sortedDatasets = Object.values(formatted).sort((i1, i2) => i1.label.localeCompare(i2.label))\r\n        const data = {\r\n            datasets: sortedDatasets\r\n        }\r\n\r\n        // Update the state\r\n        this.setState({plotData: data})\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateData(this.state.beginYear, this.state.endYear, this.state.selectedCountry);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.beginYear !== this.state.beginYear || prevProps.colors !== this.props.colors) {\r\n            this.generateData(this.state.beginYear, this.state.endYear, this.state.selectedCountry);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(\"Data:\", this.props.data);\r\n        // console.log(\"Countries:\", this.props.countries);\r\n        // console.log(\"Plot data\", this.state.plotData);\r\n\r\n        const options = {\r\n            scales: {\r\n                y: {\r\n                    beginAtZero: true,\r\n                    title: {\r\n                        text: \"Food Loss Percentage\",\r\n                        display: true,\r\n                        color: \"black\"\r\n                    }\r\n                },\r\n                x: {\r\n                    title: {\r\n                        text: \"Year\",\r\n                        display: true,\r\n                        color: \"black\"\r\n                    }\r\n                }\r\n            },\r\n            plugins: {\r\n                legend: {\r\n                    maxHeight: 2000\r\n                },\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: context => {\r\n                            // console.log(context.dataset.data, context.dataset.data[0]);\r\n                            const index = context.dataIndex;\r\n                            const item = context.dataset.data[index];\r\n                            const country = item.country;\r\n                            const commodity = item.commodity;\r\n                            const year = item.x;\r\n                            const loss = item.y;\r\n                            return \"Country: \" + country + \"; Commodity: \" + commodity + \"; Year: \" + year + \"; Percentage Loss: \" + loss;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        return (\r\n            <div>\r\n                <YearRangeSlider\r\n                    earliest={this.state.earliestYear}\r\n                    latest={this.state.endYear - 1}\r\n                    defaultValue={this.state.defaultBeginYear}\r\n                    value={this.state.beginYear}\r\n                    setValue={value => this.setState({beginYear: value})}\r\n                />\r\n                <Scatter options={options} data={this.state.plotData}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction YearRangeSlider(props) {\r\n    const [displayValue, setDisplayValue] = useState(props.value);\r\n\r\n    return (\r\n        <>\r\n            <Form.Label>Year Range: {displayValue} - 2021</Form.Label><br/>\r\n            Select start of range:\r\n            <Form.Range min={props.earliest} max={props.latest} defaultValue={props.defaultValue}\r\n                        onChange={e => setDisplayValue(e.target.value)}\r\n                        onMouseUp={e => props.setValue(e.target.value)}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nfunction References() {\r\n    return <div id=\"references\">\r\n        <h5>References</h5>\r\n        <ul>\r\n            <li>Test</li>\r\n        </ul>\r\n    </div>\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}